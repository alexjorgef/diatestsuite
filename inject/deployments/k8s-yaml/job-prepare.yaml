apiVersion: batch/v1
kind: Job
metadata:
  name: job-prepare
spec:
  ttlSecondsAfterFinished: 10
  template:
    spec:
      containers:
      - name: blockchainservice
        image: diadata.blockchainservice:latest
        imagePullPolicy: IfNotPresent
        command: ["blockchainservice"]
        args: []
        env:
          - name: USE_ENV
            value: "true"
          - name: POSTGRES_HOST
            value: "postgres.default.svc.cluster.local"
          - name: POSTGRES_USER
            value: "postgres"
          - name: POSTGRES_PASSWORD
            value: "password"
          - name: POSTGRES_DB
            value: "postgres"
      - name: assetcollectionservice-ethassets
        image: diadata.assetcollectionservice:latest
        imagePullPolicy: Never
        command: ["assetCollectionService"]
        args: ["-source=assetlists", "-secret=eth_assets", "-caching=true"]
        env:
          - name: USE_ENV
            value: "true"
          - name: POSTGRES_HOST
            value: "postgres.default.svc.cluster.local"
          - name: POSTGRES_USER
            value: "postgres"
          - name: POSTGRES_PASSWORD
            value: "password"
          - name: POSTGRES_DB
            value: "postgres"
      - name: assetcollectionservice-nonethassets
        image: diadata.assetcollectionservice:latest
        imagePullPolicy: Never
        command: ["assetCollectionService"]
        args:
          ["-source=assetlists", "-secret=non_eth_assets", "-caching=true"]
        env:
          - name: USE_ENV
            value: "true"
          - name: POSTGRES_HOST
            value: "postgres.default.svc.cluster.local"
          - name: POSTGRES_USER
            value: "postgres"
          - name: POSTGRES_PASSWORD
            value: "password"
          - name: POSTGRES_DB
            value: "postgres"
      - name: assetcollectionservice-fiatassets
        image: diadata.assetcollectionservice:latest
        imagePullPolicy: Never
        command: ["assetCollectionService"]
        args: ["-source=assetlists", "-secret=fiat_assets", "-caching=true"]
        env:
          - name: USE_ENV
            value: "true"
          - name: POSTGRES_HOST
            value: "postgres.default.svc.cluster.local"
          - name: POSTGRES_USER
            value: "postgres"
          - name: POSTGRES_PASSWORD
            value: "password"
          - name: POSTGRES_DB
            value: "postgres"
      initContainers:
        - name: check-postgres-connection
          image: postgres:15-alpine
          env:
          - name: PGHOST
            value: "postgres.default.svc.cluster.local"
          - name: PGUSER
            value: "postgres"
          - name: PGPASSWORD
            value: "password"
          command: ["sh", "-c", "until pg_isready -h $PGHOST -U $PGUSER; do sleep 1; done"]
        - name: check-redis-connection
          image: redis:7
          env:
          - name: REDISCLI_URL
            value: "redis://redis.default.svc.cluster.local:6379/0"
          command: ["sh", "-c", "until redis-cli -u $REDISCLI_URL ping; do sleep 1; done"]
        - name: check-influxdb-connection
          image: influxdb:1.8
          env:
          - name: INFLUXDB_URL
            value: "influx.default.svc.cluster.local"
          - name: INFLUXDB_USERNAME
            value: "test"
          - name: INFLUXDB_PASSWORD
            value: "testtest"
          command: ["sh", "-c", "until influx -host $INFLUXDB_URL -username $INFLUXDB_USERNAME -password $INFLUXDB_PASSWORD -execute 'SHOW DATABASES'; do sleep 1; done"]
        - name: check-kafka-connection
          image: confluentinc/cp-kafkacat:6.2.1
          env:
          - name: KAFKA_BROKER_URL
            value: "kafka.default.svc.cluster.local:9094"
          command: ["sh", "-c", "until kafkacat -b $KAFKA_BROKER_URL -L; do sleep 1; done"]
      restartPolicy: Never
  backoffLimit: 0