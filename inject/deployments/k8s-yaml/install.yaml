---
# InfluxDB
apiVersion: apps/v1
kind: Deployment
metadata:
  name: influx
  labels:
    app: influx
spec:
  selector:
    matchLabels:
      app: influx
  template:
    metadata:
      labels:
        app: influx
    spec:
      containers:
        - name: influx
          image: influxdb:1.8
          imagePullPolicy: IfNotPresent
          ports:
            - name: influx-server
              containerPort: 8086
          env:
          - name: INFLUXDB_HTTP_MAX_BODY_SIZE
            value: "0"
          - name: INFLUXDB_DATA_CACHE_MAX_MEMORY_SIZE
            value: "4g"
          - name: INFLUXDB_DATA_MAX_INDEX_LOG_FILE_SIZE
            value: "8m"
          - name: DOCKER_INFLUXDB_INIT_MODE
            value: "setup"
          - name: DOCKER_INFLUXDB_INIT_USERNAME
            value: "test"
          - name: DOCKER_INFLUXDB_INIT_PASSWORD
            value: "testtest"
          - name: DOCKER_INFLUXDB_INIT_ORG
            value: "test_org"
          - name: DOCKER_INFLUXDB_INIT_BUCKET
            value: "test_bucket"
          - name: DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
            value: "test_token"
---
apiVersion: v1
kind: Service
metadata:
  name: influx
  labels:
    app: influx
spec:
  ports:
    - port: 8086
      targetPort: influx-server
  selector:
    app: influx
  type: NodePort
---
# Kafka
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: zookeeper
          image: wurstmeister/zookeeper:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: zookeep-server
              containerPort: 2181
          env:
          - name: ZOOKEEPER_CLIENT_PORT
            value: "2181"
          - name: ZOOKEEPER_TICK_TIME
            value: "2000"
        - name: kafka
          image: wurstmeister/kafka:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: kafka-server
              containerPort: 9094
          env:
          - name: HOSTNAME_COMMAND
            value: "docker info | grep ^Name: | cut -d' ' -f 2"
          - name: KAFKA_PORT
            value: "9092"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "localhost:2181"
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
          - name: KAFKA_ADVERTISED_LISTENERS
            value: "INSIDE://:9092,OUTSIDE://kafka.default.svc.cluster.local:9094"
          - name: KAFKA_LISTENERS
            value: "INSIDE://:9092,OUTSIDE://:9094"
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: "INSIDE"
          - name: KAFKA_LOG_DIRS
            value: "/kafka/kafka-logs-1"
          - name: KAFKA_DELETE_TOPIC_ENABLE
            value: "true"
          - name: KAFKA_MESSAGE_MAX_BYTES
            value: "50000000"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  ports:
    - port: 9094
      targetPort: kafka-server
      name: kafka-server
    - port: 2181
      targetPort: zookeep-server
      name: zookeep-server
  selector:
    app: kafka
  type: NodePort
---
# PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: alex1a/diadata.postgres:latest
          imagePullPolicy: Always
          ports:
            - name: postgres-server
              containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_DB
              value: postgres
            - name: POSTGRES_PASSWORD
              value: password
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  ports:
    - port: 5432
      targetPort: postgres-server
  selector:
    app: postgres
  type: NodePort
---
# Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis-server
              containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
spec:
  ports:
    - port: 6379
      targetPort: redis-server
  selector:
    app: redis
  type: NodePort
---
# filtersblockservice
apiVersion: apps/v1
kind: Deployment
metadata:
  name: filtersblockservice
  labels:
    app: filtersblockservice
spec:
  selector:
    matchLabels:
      app: filtersblockservice
  template:
    metadata:
      labels:
        app: filtersblockservice
    spec:
      containers:
        - name: filtersblockservice
          image: diadata.filtersblockservice:latest
          imagePullPolicy: Never
          command: ["filtersBlockService"]
          args: ["-replayInflux=false", "-historical=true", "-testing=true"]
          env:
            - name: USE_ENV
              value: "true"
            - name: POSTGRES_HOST
              value: "postgres.default.svc.cluster.local"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "password"
            - name: POSTGRES_DB
              value: "postgres"
            - name: INFLUXURL
              value: "http://influx.default.svc.cluster.local:8086"
            - name: INFLUXUSER
              value: "test"
            - name: INFLUXPASSWORD
              value: "testtest"
            - name: REDISURL
              value: "redis.default.svc.cluster.local:6379"
            - name: KAFKAURL
              value: "kafka.default.svc.cluster.local:9094"
      initContainers:
        - name: check-postgres-connection
          image: postgres:15-alpine
          env:
          - name: PGHOST
            value: "postgres.default.svc.cluster.local"
          - name: PGUSER
            value: "postgres"
          - name: PGPASSWORD
            value: "password"
          command: ["sh", "-c", "until pg_isready -h $PGHOST -U $PGUSER; do sleep 1; done"]
        - name: check-redis-connection
          image: redis:7
          env:
          - name: REDISCLI_URL
            value: "redis://redis.default.svc.cluster.local:6379/0"
          command: ["sh", "-c", "until redis-cli -u $REDISCLI_URL ping; do sleep 1; done"]
        - name: check-influxdb-connection
          image: influxdb:1.8
          env:
          - name: INFLUXDB_URL
            value: "influx.default.svc.cluster.local"
          - name: INFLUXDB_USERNAME
            value: "test"
          - name: INFLUXDB_PASSWORD
            value: "testtest"
          command: ["sh", "-c", "until influx -host $INFLUXDB_URL -username $INFLUXDB_USERNAME -password $INFLUXDB_PASSWORD -execute 'SHOW DATABASES'; do sleep 1; done"]
        - name: check-kafka-connection
          image: confluentinc/cp-kafkacat:6.2.1
          env:
          - name: KAFKA_BROKER_URL
            value: "kafka.default.svc.cluster.local:9094"
          command: ["sh", "-c", "until kafkacat -b $KAFKA_BROKER_URL -L; do sleep 1; done"]
---
# tradesblockservice
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tradesblockservice
  labels:
    app: tradesblockservice
spec:
  selector:
    matchLabels:
      app: tradesblockservice
  template:
    metadata:
      labels:
        app: tradesblockservice
    spec:
      containers:
        - name: tradesblockservice
          image: diadata.tradesblockservice:latest
          imagePullPolicy: Never
          command: ["tradesBlockService"]
          args: ["-historical=true", "-testing=true"]
          env:
            - name: USE_ENV
              value: "true"
            - name: POSTGRES_HOST
              value: "postgres.default.svc.cluster.local"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "password"
            - name: POSTGRES_DB
              value: "postgres"
            - name: INFLUXURL
              value: "http://influx.default.svc.cluster.local:8086"
            - name: INFLUXUSER
              value: "test"
            - name: INFLUXPASSWORD
              value: "testtest"
            - name: REDISURL
              value: "redis.default.svc.cluster.local:6379"
            - name: KAFKAURL
              value: "kafka.default.svc.cluster.local:9094"
            - name: TRADE_VOLUME_THRESHOLD_EXPONENT
              value: "4"
      initContainers:
        - name: check-postgres-connection
          image: postgres:15-alpine
          env:
          - name: PGHOST
            value: "postgres.default.svc.cluster.local"
          - name: PGUSER
            value: "postgres"
          - name: PGPASSWORD
            value: "password"
          command: ["sh", "-c", "until pg_isready -h $PGHOST -U $PGUSER; do sleep 1; done"]
        - name: check-redis-connection
          image: redis:7
          env:
          - name: REDISCLI_URL
            value: "redis://redis.default.svc.cluster.local:6379/0"
          command: ["sh", "-c", "until redis-cli -u $REDISCLI_URL ping; do sleep 1; done"]
        - name: check-influxdb-connection
          image: influxdb:1.8
          env:
          - name: INFLUXDB_URL
            value: "influx.default.svc.cluster.local"
          - name: INFLUXDB_USERNAME
            value: "test"
          - name: INFLUXDB_PASSWORD
            value: "testtest"
          command: ["sh", "-c", "until influx -host $INFLUXDB_URL -username $INFLUXDB_USERNAME -password $INFLUXDB_PASSWORD -execute 'SHOW DATABASES'; do sleep 1; done"]
        - name: check-kafka-connection
          image: confluentinc/cp-kafkacat:6.2.1
          env:
          - name: KAFKA_BROKER_URL
            value: "kafka.default.svc.cluster.local:9094"
          command: ["sh", "-c", "until kafkacat -b $KAFKA_BROKER_URL -L; do sleep 1; done"]